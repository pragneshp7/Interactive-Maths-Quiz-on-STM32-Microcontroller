<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Release\Keyboard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Release\Keyboard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Tue Nov 27 15:08:36 2018
<BR><P>
<H3>Maximum Stack Usage =        608 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e8]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e8]">osRtxErrorNotify</a><BR>
 <LI><a href="#[73]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">osRtxIdleThread</a><BR>
 <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">DebugMon_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">HAL_SRAM_DMA_XferCpltCallback</a> from stm32f4xx_hal_sram.o(.text) referenced from stm32f4xx_hal_sram.o(.text)
 <LI><a href="#[60]">HAL_SRAM_DMA_XferErrorCallback</a> from stm32f4xx_hal_sram.o(.text) referenced from stm32f4xx_hal_sram.o(.text)
 <LI><a href="#[5b]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">OTG_FS_IRQHandler</a> from otg_fs_stm32f4xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_IRQHandler</a> from otg_hs_stm32f4xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[b]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b1]">USBH0_SignalPipeEvent</a> from usbh_config_1.o(.text) referenced from usbh_config_1.o(.constdata)
 <LI><a href="#[af]">USBH0_SignalPortEvent</a> from usbh_config_1.o(.text) referenced from usbh_config_1.o(.constdata)
 <LI><a href="#[b2]">USBH1_SignalPipeEvent</a> from usbh_config_1.o(.text) referenced from usbh_config_1.o(.constdata)
 <LI><a href="#[b0]">USBH1_SignalPortEvent</a> from usbh_config_1.o(.text) referenced from usbh_config_1.o(.constdata)
 <LI><a href="#[65]">USBH_ConnectDebounce</a> from usbh_lib_core.o(i.USBH_ConnectDebounce) referenced from usbh_config_1.o(.text)
 <LI><a href="#[63]">USBH_Core_Thread</a> from usbh_lib_core.o(i.USBH_Core_Thread) referenced from usbh_config_1.o(.text)
 <LI><a href="#[8c]">USBH_GetCapabilities</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[9c]">USBH_GetFrameNumber</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[8b]">USBH_GetVersion</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[64]">USBH_HID_IntIn_Thread</a> from usbh_lib_hid.o(i.USBH_HID_IntIn_Thread) referenced from usbh_config_1.o(.text)
 <LI><a href="#[8d]">USBH_Initialize</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[95]">USBH_PipeCreate</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[97]">USBH_PipeDelete</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[96]">USBH_PipeModify</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[98]">USBH_PipeReset</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[99]">USBH_PipeTransfer</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[9b]">USBH_PipeTransferAbort</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[9a]">USBH_PipeTransferGetResult</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[94]">USBH_PortGetState</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[91]">USBH_PortReset</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[93]">USBH_PortResume</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[92]">USBH_PortSuspend</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[90]">USBH_PortVbusOnOff</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[8f]">USBH_PowerControl</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[8e]">USBH_Uninitialize</a> from usbh_fs_stm32f4xx.o(.text) referenced 2 times from usbh_fs_stm32f4xx.o(.constdata)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[8a]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[5e]">app_main</a> from keyboard.o(.text) referenced from main.o(.text)
 <LI><a href="#[89]">fputc</a> from retarget_io.o(.text) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[5d]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[73]">osRtxIdleThread</a> from rtx_config.o(.text) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[84]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[85]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[86]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[88]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[74]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[75]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[87]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[66]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[67]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[68]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[69]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[6a]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[6b]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[6c]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[6d]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[6e]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[6f]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[70]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[71]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[72]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[76]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[77]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[78]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[79]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[7a]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[7b]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[7c]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[7d]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[7e]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[7f]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[80]">svcRtxTimerDelete</a> from rtx_timer.o(.text.svcRtxTimerDelete) referenced from rtx_timer.o(.text.osTimerDelete)
 <LI><a href="#[81]">svcRtxTimerNew</a> from rtx_timer.o(.text.svcRtxTimerNew) referenced from rtx_timer.o(.text.osTimerNew)
 <LI><a href="#[82]">svcRtxTimerStart</a> from rtx_timer.o(.text.svcRtxTimerStart) referenced from rtx_timer.o(.text.osTimerStart)
 <LI><a href="#[83]">svcRtxTimerStop</a> from rtx_timer.o(.text.svcRtxTimerStop) referenced from rtx_timer.o(.text.osTimerStop)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1d9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b3]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1da]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1db]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1dc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1dd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1de]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b5]"></a>HAL_GetTick</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NAND_GetECC
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c1]"></a>getKey</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getKey &rArr; putc &rArr; fputc &rArr; stdout_putchar &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetKeyboardKey
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[5e]"></a>app_main</STRONG> (Thumb, 344 bytes, Stack size 304 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = app_main &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKey
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>stdout_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stdout_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stdout_init &rArr; GLCD_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetForegroundColor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetFont
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetBackgroundColor
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[d4]"></a>stdout_putchar</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stdout_display.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stdout_putchar &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cf]"></a>GLCD_Initialize</STRONG> (Thumb, 1644 bytes, Stack size 80 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GLCD_Initialize &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
</UL>

<P><STRONG><a name="[dc]"></a>GLCD_Uninitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_DeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>

<P><STRONG><a name="[d1]"></a>GLCD_SetForegroundColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
</UL>

<P><STRONG><a name="[d0]"></a>GLCD_SetBackgroundColor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
</UL>

<P><STRONG><a name="[d2]"></a>GLCD_ClearScreen</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GLCD_ClearScreen &rArr; GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
</UL>

<P><STRONG><a name="[d3]"></a>GLCD_SetFont</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_init
</UL>

<P><STRONG><a name="[df]"></a>GLCD_DrawPixel</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>

<P><STRONG><a name="[e0]"></a>GLCD_DrawHLine</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[e1]"></a>GLCD_DrawVLine</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawRectangle
</UL>

<P><STRONG><a name="[e2]"></a>GLCD_DrawRectangle</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
</UL>

<P><STRONG><a name="[d5]"></a>GLCD_DrawChar</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GLCD_DrawChar &rArr; GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawString
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[e3]"></a>GLCD_DrawString</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
</UL>

<P><STRONG><a name="[e4]"></a>GLCD_DrawBargraph</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>

<P><STRONG><a name="[e5]"></a>GLCD_DrawBitmap</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>

<P><STRONG><a name="[e6]"></a>GLCD_VScroll</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>

<P><STRONG><a name="[e7]"></a>GLCD_FrameBufferAccess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, glcd_mcbstm32f400.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
</UL>

<P><STRONG><a name="[1df]"></a>GLCD_FrameBufferAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, glcd_mcbstm32f400.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[e8]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[4f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, otg_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_FS_IRQ &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>OTG_FS_PinsConfigure</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, otg_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OTG_FS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[ec]"></a>OTG_FS_PinsUnconfigure</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, otg_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OTG_FS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
</UL>

<P><STRONG><a name="[ed]"></a>OTG_FS_PinVbusOnOff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, otg_fs_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortVbusOnOff
</UL>

<P><STRONG><a name="[ee]"></a>OTG_FS_PinGetOC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, otg_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OTG_FS_PinGetOC
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortGetState
</UL>

<P><STRONG><a name="[59]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, otg_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OTG_HS_IRQHandler &rArr; USBH_HS_IRQ &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HS_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>OTG_HS_PinsConfigure</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, otg_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OTG_HS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_GPIO_Clock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[f3]"></a>OTG_HS_PinsUnconfigure</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, otg_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OTG_HS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Uninitialize
</UL>

<P><STRONG><a name="[f4]"></a>OTG_HS_PinVbusOnOff</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, otg_hs_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortVbusOnOff
</UL>

<P><STRONG><a name="[1e0]"></a>OTG_HS_PinGetOC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, otg_hs_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>USBH_FS_IRQ</STRONG> (Thumb, 796 bytes, Stack size 40 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_FS_IRQ &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>USBH_HS_IRQ</STRONG> (Thumb, 862 bytes, Stack size 40 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_HS_IRQ &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[1e1]"></a>fgetc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>__backspace</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_assert</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, retarget_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[105]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[106]"></a>HAL_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>HAL_GetTickPrio</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>HAL_SetTickFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferAbort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortReset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferAbort
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PortReset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_SuspendTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>HAL_ResumeTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>HAL_DisableCompensationCell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>HAL_GetUID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>HAL_NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>HAL_NVIC_GetPriority</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>HAL_NVIC_SetPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>HAL_NVIC_GetPendingIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>HAL_NVIC_GetActive</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>

<P><STRONG><a name="[10c]"></a>HAL_DMA_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>

<P><STRONG><a name="[10f]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>

<P><STRONG><a name="[110]"></a>HAL_DMA_Start</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>

<P><STRONG><a name="[112]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_DMA
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_DMA
</UL>

<P><STRONG><a name="[113]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_PollForTransfer
</UL>

<P><STRONG><a name="[200]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>HAL_DMA_PollForTransfer</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[201]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>HAL_DMA_RegisterCallback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>HAL_DMA_UnRegisterCallback</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinsConfigure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
</UL>

<P><STRONG><a name="[de]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 288 bytes, Stack size 36 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinsUnconfigure
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsUnconfigure
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Uninitialize
</UL>

<P><STRONG><a name="[ef]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinGetOC
</UL>

<P><STRONG><a name="[db]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinVbusOnOff
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinsConfigure
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinVbusOnOff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[206]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>HAL_GPIO_LockPin</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[119]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>

<P><STRONG><a name="[208]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>HAL_RCC_DisableCSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>

<P><STRONG><a name="[11c]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SRAM_Init &rArr; FSMC_NORSRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[120]"></a>HAL_SRAM_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_DeInit
</UL>

<P><STRONG><a name="[dd]"></a>HAL_SRAM_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspDeInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Uninitialize
</UL>

<P><STRONG><a name="[5f]"></a>HAL_SRAM_DMA_XferCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sram.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>HAL_SRAM_DMA_XferErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sram.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>HAL_SRAM_Read_8b</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>HAL_SRAM_Write_8b</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>HAL_SRAM_Read_16b</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>HAL_SRAM_Write_16b</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>HAL_SRAM_Read_32b</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>HAL_SRAM_Write_32b</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>HAL_SRAM_Read_DMA</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[123]"></a>HAL_SRAM_Write_DMA</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[124]"></a>HAL_SRAM_WriteOperation_Enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_WriteOperation_Enable
</UL>

<P><STRONG><a name="[126]"></a>HAL_SRAM_WriteOperation_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_WriteOperation_Disable
</UL>

<P><STRONG><a name="[215]"></a>HAL_SRAM_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_ll_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[121]"></a>FSMC_NORSRAM_DeInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_DeInit
</UL>

<P><STRONG><a name="[11e]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[11f]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[125]"></a>FSMC_NORSRAM_WriteOperation_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_WriteOperation_Enable
</UL>

<P><STRONG><a name="[127]"></a>FSMC_NORSRAM_WriteOperation_Disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_WriteOperation_Disable
</UL>

<P><STRONG><a name="[216]"></a>FSMC_NAND_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>FSMC_NAND_CommonSpace_Timing_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>FSMC_NAND_AttributeSpace_Timing_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>FSMC_NAND_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>FSMC_NAND_ECC_Enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>FSMC_NAND_ECC_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>FSMC_NAND_GetECC</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[21c]"></a>FSMC_PCCARD_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>FSMC_PCCARD_CommonSpace_Timing_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>FSMC_PCCARD_AttributeSpace_Timing_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>FSMC_PCCARD_IOSpace_Timing_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>FSMC_PCCARD_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>USBH_ThreadCreate</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_ThreadCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
</UL>

<P><STRONG><a name="[12a]"></a>USBH_ThreadGetHandle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[12c]"></a>USBH_ThreadTerminate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize_Lib
</UL>

<P><STRONG><a name="[12e]"></a>USBH_Delay</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[130]"></a>USBH_TimerCreate</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_TimerCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerNew
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[132]"></a>USBH_TimerStart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_TimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ConnectDebounce
</UL>

<P><STRONG><a name="[134]"></a>USBH_TimerStop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>

<P><STRONG><a name="[136]"></a>USBH_TimerDelete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[138]"></a>USBH_ThreadFlagsSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPortEvent
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ConnectDebounce
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[13a]"></a>USBH_ThreadFlagsWait</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_ThreadFlagsWait &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[13c]"></a>USBH_MutexCreate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[13e]"></a>USBH_MutexAcquire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MutexAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[140]"></a>USBH_MutexRelease</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[142]"></a>USBH_MutexDelete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[144]"></a>USBH_SemaphoreCreate</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[146]"></a>USBH_SemaphoreAcquire</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_SemaphoreAcquire
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
</UL>

<P><STRONG><a name="[148]"></a>USBH_SemaphoreRelease</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
</UL>

<P><STRONG><a name="[14a]"></a>USBH_SemaphoreDelete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_config_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[af]"></a>USBH0_SignalPortEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH0_SignalPortEvent &rArr; USBH_SignalPortEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPortEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>USBH0_SignalPipeEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH0_SignalPipeEvent &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>USBH1_SignalPortEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH1_SignalPortEvent &rArr; USBH_SignalPortEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPortEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>USBH1_SignalPipeEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH1_SignalPipeEvent &rArr; USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>USBH_MSC_Configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1ab]"></a>USBH_MSC_Unconfigure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1a7]"></a>USBH_MSC_Initialize_Lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1c7]"></a>USBH_MSC_Uninitialize_Lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[1a5]"></a>USBH_CDC_Configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1ad]"></a>USBH_CDC_Unconfigure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1a9]"></a>USBH_CDC_Initialize_Lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1c8]"></a>USBH_CDC_Uninitialize_Lib</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[1a2]"></a>USBH_CustomClass_Configure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1aa]"></a>USBH_CustomClass_Unconfigure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1a6]"></a>USBH_CustomClass_Initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1c6]"></a>USBH_CustomClass_Uninitialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_config_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadCreate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitializeLib
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Configure
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b3]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetKeyboardKey
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[158]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[227]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[228]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[229]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[156]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[1d6]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[22b]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b4]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[22c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[22d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[180]"></a>OS_Tick_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[17f]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[17e]"></a>OS_Tick_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[c3]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKey
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[b6]"></a>osKernelGetState</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[b7]"></a>osKernelGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[12f]"></a>osKernelGetTickFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexAcquire
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[bb]"></a>osKernelInitialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>osKernelStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>osMessageQueueGet</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[17b]"></a>osMessageQueueNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[161]"></a>osMessageQueuePut</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[13f]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexAcquire
</UL>

<P><STRONG><a name="[143]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexDelete
</UL>

<P><STRONG><a name="[13d]"></a>osMutexNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexCreate
</UL>

<P><STRONG><a name="[141]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexRelease
</UL>

<P><STRONG><a name="[181]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[171]"></a>osRtxMemoryFree</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[84]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[162]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerNew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[164]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[17d]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[169]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[14e]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[160]"></a>osRtxPostProcess</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[16b]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[16a]"></a>osRtxThreadDispatch</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
</UL>

<P><STRONG><a name="[165]"></a>osRtxThreadListGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[173]"></a>osRtxThreadListPut</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[16c]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[172]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[16d]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[167]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[175]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[176]"></a>osRtxThreadStartup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[16f]"></a>osRtxThreadSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[177]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[166]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[14f]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[74]"></a>osRtxTimerThread</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[147]"></a>osSemaphoreAcquire</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
</UL>

<P><STRONG><a name="[14b]"></a>osSemaphoreDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreDelete), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreDelete
</UL>

<P><STRONG><a name="[145]"></a>osSemaphoreNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreCreate
</UL>

<P><STRONG><a name="[149]"></a>osSemaphoreRelease</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
</UL>

<P><STRONG><a name="[87]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[139]"></a>osThreadFlagsSet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
</UL>

<P><STRONG><a name="[13b]"></a>osThreadFlagsWait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
</UL>

<P><STRONG><a name="[12b]"></a>osThreadGetId</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
</UL>

<P><STRONG><a name="[bc]"></a>osThreadNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadCreate
</UL>

<P><STRONG><a name="[12d]"></a>osThreadTerminate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
</UL>

<P><STRONG><a name="[137]"></a>osTimerDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerDelete))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerDelete
</UL>

<P><STRONG><a name="[131]"></a>osTimerNew</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerNew))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerCreate
</UL>

<P><STRONG><a name="[133]"></a>osTimerStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
</UL>

<P><STRONG><a name="[135]"></a>osTimerStop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_timer.o(.text.osTimerStop), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStop
</UL>

<P><STRONG><a name="[65]"></a>USBH_ConnectDebounce</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_ConnectDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_ConnectDebounce &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>USBH_ControlTransfer</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, usbh_lib_core.o(i.USBH_ControlTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexRelease
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeModify
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
</UL>

<P><STRONG><a name="[63]"></a>USBH_Core_Thread</STRONG> (Thumb, 612 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_Core_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = USBH_Core_Thread &rArr; USBH_Engine &rArr; USBH_EnumerateDevice &rArr; USBH_HID_Initialize_Lib &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerStart
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortGetState
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify_Lib
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>USBH_DeviceRequest_GetDescriptor</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[193]"></a>USBH_DeviceRequest_SetAddress</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USBH_DeviceRequest_SetAddress &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[194]"></a>USBH_DeviceRequest_SetConfiguration</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_DeviceRequest_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USBH_DeviceRequest_SetConfiguration &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1bc]"></a>USBH_DriverGetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_lib_drv.o(i.USBH_DriverGetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[1bb]"></a>USBH_DriverGetVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_lib_drv.o(i.USBH_DriverGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[195]"></a>USBH_DriverInitialize</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverInitialize &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[18f]"></a>USBH_DriverPipeCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, usbh_lib_drv.o(i.USBH_DriverPipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
</UL>

<P><STRONG><a name="[196]"></a>USBH_DriverPipeDelete</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPipeDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPipeDelete &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
</UL>

<P><STRONG><a name="[185]"></a>USBH_DriverPipeModify</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, usbh_lib_drv.o(i.USBH_DriverPipeModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_DriverPipeModify &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[197]"></a>USBH_DriverPipeTransfer</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, usbh_lib_drv.o(i.USBH_DriverPipeTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[198]"></a>USBH_DriverPipeTransferAbort</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPipeTransferAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[199]"></a>USBH_DriverPipeTransferGetResult</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_lib_drv.o(i.USBH_DriverPipeTransferGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_DriverPipeTransferGetResult &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
</UL>

<P><STRONG><a name="[183]"></a>USBH_DriverPortGetState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbh_lib_drv.o(i.USBH_DriverPortGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_DriverPortGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ConnectDebounce
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[19a]"></a>USBH_DriverPortReset</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPortReset &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[19b]"></a>USBH_DriverPortResume</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPortResume &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[19c]"></a>USBH_DriverPortSuspend</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPortSuspend &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[18b]"></a>USBH_DriverPortVbusOnOff</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPortVbusOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPortVbusOnOff &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
</UL>

<P><STRONG><a name="[19d]"></a>USBH_DriverPowerControl</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usbh_lib_drv.o(i.USBH_DriverPowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_DriverPowerControl &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreRelease
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreAcquire
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[18e]"></a>USBH_GetFree_PIPE</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_lib_core.o(i.USBH_GetFree_PIPE))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
</UL>

<P><STRONG><a name="[1ae]"></a>USBH_Get_Thread_ID_of_Pipe</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_Get_Thread_ID_of_Pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Get_Thread_ID_of_Pipe
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
</UL>

<P><STRONG><a name="[1a3]"></a>USBH_HID_Configure</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, usbh_lib_hid.o(i.USBH_HID_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USBH_HID_Configure &rArr; USBH_PipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1b7]"></a>USBH_HID_DataReceived</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_hid.o(i.USBH_HID_DataReceived))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
</UL>

<P><STRONG><a name="[1b1]"></a>USBH_HID_GetDevice</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_lib_hid.o(i.USBH_HID_GetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HID_GetDevice
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
</UL>

<P><STRONG><a name="[c5]"></a>USBH_HID_GetKeyboardKey</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, usbh_lib_hid.o(i.USBH_HID_GetKeyboardKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_HID_GetKeyboardKey &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKey
</UL>

<P><STRONG><a name="[c2]"></a>USBH_HID_GetStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_lib_hid.o(i.USBH_HID_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HID_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKey
</UL>

<P><STRONG><a name="[1b5]"></a>USBH_HID_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_hid.o(i.USBH_HID_Initialize))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
</UL>

<P><STRONG><a name="[1a8]"></a>USBH_HID_Initialize_Lib</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, usbh_lib_hid.o(i.USBH_HID_Initialize_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = USBH_HID_Initialize_Lib &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadCreate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ParseReportDescriptor
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetDevice
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[64]"></a>USBH_HID_IntIn_Thread</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbh_lib_hid.o(i.USBH_HID_IntIn_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USBH_HID_IntIn_Thread &rArr; USBH_PipeReceive &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_DataReceived
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceiveGetResult
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_config_1.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>USBH_HID_ParseReportDescriptor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_hid.o(i.USBH_HID_ParseReportDescriptor))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
</UL>

<P><STRONG><a name="[1ac]"></a>USBH_HID_Unconfigure</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usbh_lib_hid.o(i.USBH_HID_Unconfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBH_HID_Unconfigure &rArr; USBH_PipeDelete &rArr; USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1ba]"></a>USBH_HID_Uninitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_hid.o(i.USBH_HID_Uninitialize))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize_Lib
</UL>

<P><STRONG><a name="[1b9]"></a>USBH_HID_Uninitialize_Lib</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbh_lib_hid.o(i.USBH_HID_Uninitialize_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_HID_Uninitialize_Lib &rArr; USBH_MemoryFree &rArr; USBH_MemoryFreeLib
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckInstance
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
</UL>

<P><STRONG><a name="[c8]"></a>USBH_Initialize</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, usbh_lib_core.o(i.USBH_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USBH_Initialize &rArr; USBH_DefaultPipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SemaphoreCreate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MutexCreate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerDelete
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_TimerCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadTerminate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryGetPoolSize
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPowerControl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortVbusOnOff
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverInitialize
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverGetVersion
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverGetCapabilities
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitialize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[191]"></a>USBH_MemoryAllocate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_lib_core.o(i.USBH_MemoryAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_MemoryAllocate &rArr; USBH_MemoryAllocateLib
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocateLib
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1bf]"></a>USBH_MemoryAllocateLib</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, usbh_lib_mem.o(i.USBH_MemoryAllocateLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MemoryAllocateLib
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
</UL>

<P><STRONG><a name="[192]"></a>USBH_MemoryFree</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_MemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_MemoryFree &rArr; USBH_MemoryFreeLib
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFreeLib
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize_Lib
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1c0]"></a>USBH_MemoryFreeLib</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbh_lib_mem.o(i.USBH_MemoryFreeLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MemoryFreeLib
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
</UL>

<P><STRONG><a name="[1be]"></a>USBH_MemoryGetPoolSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_lib_mem.o(i.USBH_MemoryGetPoolSize))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[1bd]"></a>USBH_MemoryInitialize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_MemoryInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_MemoryInitialize &rArr; USBH_MemoryInitializeLib
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitializeLib
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[1c1]"></a>USBH_MemoryInitializeLib</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_lib_mem.o(i.USBH_MemoryInitializeLib))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MemoryInitializeLib
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitialize
</UL>

<P><STRONG><a name="[1c5]"></a>USBH_MemoryIsInPool</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_lib_mem.o(i.USBH_MemoryIsInPool))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
</UL>

<P><STRONG><a name="[1c2]"></a>USBH_Notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_lib_core.o(i.USBH_Notify))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify_Lib
</UL>

<P><STRONG><a name="[1b8]"></a>USBH_PipeAbort</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_PipeAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_PipeAbort &rArr; USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SignalPipeEvent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
</UL>

<P><STRONG><a name="[1af]"></a>USBH_PipeCreate</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, usbh_lib_core.o(i.USBH_PipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_PipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFree_PIPE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Configure
</UL>

<P><STRONG><a name="[1b0]"></a>USBH_PipeDelete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_PipeDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_PipeDelete &rArr; USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeDelete
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Configure
</UL>

<P><STRONG><a name="[187]"></a>USBH_PipeReceive</STRONG> (Thumb, 604 bytes, Stack size 72 bytes, usbh_lib_core.o(i.USBH_PipeReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_PipeReceive &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryIsInPool
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[1b6]"></a>USBH_PipeReceiveGetResult</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbh_lib_core.o(i.USBH_PipeReceiveGetResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_PipeReceiveGetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
</UL>

<P><STRONG><a name="[188]"></a>USBH_PipeSend</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, usbh_lib_core.o(i.USBH_PipeSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryIsInPool
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferGetResult
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[14d]"></a>USBH_SignalPipeEvent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbh_lib_drv.o(i.USBH_SignalPipeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_SignalPipeEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_Thread_ID_of_Pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH1_SignalPipeEvent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_SignalPipeEvent
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
</UL>

<P><STRONG><a name="[14c]"></a>USBH_SignalPortEvent</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbh_lib_drv.o(i.USBH_SignalPortEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_SignalPortEvent &rArr; USBH_ThreadFlagsSet &rArr; osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH1_SignalPortEvent
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH0_SignalPortEvent
</UL>

<P><STRONG><a name="[1c9]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22f]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[c4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKey
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1cb]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[230]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[c9]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1d7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[cb]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1d4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1ce]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1cc]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d2]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1cf]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1d3]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[231]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[232]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[233]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1cd]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1d1]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[100]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[c6]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = putc &rArr; fputc &rArr; stdout_putchar &rArr; GLCD_DrawChar &rArr; GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getKey
</UL>

<P><STRONG><a name="[1d0]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b9]"></a>SystemClock_Config</STRONG> (Thumb, 142 bytes, Stack size 88 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>GLCD_SetWindow</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GLCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wr_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_FrameBufferAccess
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_VScroll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBargraph
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawVLine
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawHLine
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawChar
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_ClearScreen
</UL>

<P><STRONG><a name="[d7]"></a>wr_reg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, glcd_mcbstm32f400.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_FrameBufferAccess
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_VScroll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawPixel
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_SetWindow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_Initialize
</UL>

<P><STRONG><a name="[eb]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, otg_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
</UL>

<P><STRONG><a name="[f2]"></a>Enable_GPIO_Clock</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, otg_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinsConfigure
</UL>

<P><STRONG><a name="[f5]"></a>USBH_HW_StartTransfer</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransfer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FS_IRQ
</UL>

<P><STRONG><a name="[8b]"></a>USBH_GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>USBH_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>USBH_Initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USBH_Initialize &rArr; OTG_FS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsConfigure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>USBH_Uninitialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBH_Uninitialize &rArr; OTG_FS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinsUnconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>USBH_PowerControl</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_PowerControl &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>USBH_PortVbusOnOff</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PortVbusOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinVbusOnOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>USBH_PortReset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_PortReset &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>USBH_PortSuspend</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>USBH_PortResume</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>USBH_PortGetState</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_PortGetState &rArr; OTG_FS_PinGetOC
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_PinGetOC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>USBH_PipeCreate</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_PipeCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>USBH_PipeModify</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_PipeModify
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>USBH_PipeDelete</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>USBH_PipeReset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>USBH_PipeTransfer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_PipeTransfer &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>USBH_PipeTransferGetResult</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeTransferGetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>USBH_PipeTransferAbort</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_PipeTransferAbort &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>USBH_GetFrameNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_fs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[f6]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[f9]"></a>USBH_CH_GetIndexFromAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_fs_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferAbort
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferGetResult
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransfer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeModify
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
</UL>

<P><STRONG><a name="[fa]"></a>USBH_HW_StartTransfer</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransfer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HS_IRQ
</UL>

<P><STRONG><a name="[9d]"></a>USBH_GetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>USBH_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>USBH_Initialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_Initialize &rArr; OTG_HS_PinsConfigure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinsConfigure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>USBH_Uninitialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBH_Uninitialize &rArr; OTG_HS_PinsUnconfigure &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinsUnconfigure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>USBH_PowerControl</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_PowerControl &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>USBH_PortVbusOnOff</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PortVbusOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_PinVbusOnOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>USBH_PortReset</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_PortReset &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>USBH_PortSuspend</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>USBH_PortResume</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>USBH_PortGetState</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PortGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>USBH_PipeCreate</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_PipeCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>USBH_PipeModify</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_PipeModify
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>USBH_PipeDelete</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>USBH_PipeReset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>USBH_PipeTransfer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_PipeTransfer &rArr; USBH_HW_StartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>USBH_PipeTransferGetResult</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_PipeTransferGetResult
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>USBH_PipeTransferAbort</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_PipeTransferAbort &rArr; HAL_Delay &rArr; HAL_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CH_GetIndexFromAddress
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>USBH_GetFrameNumber</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usbh_hs_stm32f4xx.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[fb]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PowerControl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HW_StartTransfer
</UL>

<P><STRONG><a name="[fd]"></a>USBH_CH_GetIndexFromAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_hs_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferAbort
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransferGetResult
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeTransfer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeModify
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeCreate
</UL>

<P><STRONG><a name="[109]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[10e]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[111]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[10d]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[67]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[68]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[69]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[6a]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[6b]"></a>svcRtxKernelStart</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[174]"></a>ThreadFlagsCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[16e]"></a>osRtxThreadBlock</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[178]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[179]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[170]"></a>osRtxThreadFree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[88]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxThreadExit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[7b]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[7c]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[7d]"></a>svcRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[7e]"></a>svcRtxThreadNew</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[7f]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[66]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[17c]"></a>TimerInsert</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[182]"></a>TimerRemove</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtx_timer.o(.text.TimerRemove))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerStart
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxTimerDelete
</UL>

<P><STRONG><a name="[75]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL>
<P><STRONG><a name="[80]"></a>svcRtxTimerDelete</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_timer.o(.text.svcRtxTimerDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxTimerDelete &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerDelete)
</UL>
<P><STRONG><a name="[81]"></a>svcRtxTimerNew</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_timer.o(.text.svcRtxTimerNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxTimerNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerNew)
</UL>
<P><STRONG><a name="[82]"></a>svcRtxTimerStart</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_timer.o(.text.svcRtxTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxTimerStart &rArr; TimerInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStart)
</UL>
<P><STRONG><a name="[83]"></a>svcRtxTimerStop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_timer.o(.text.svcRtxTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osTimerStop)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxMutexDelete</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[71]"></a>svcRtxMutexNew</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[72]"></a>svcRtxMutexRelease</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[86]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[76]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[77]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[18d]"></a>CheckController</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_lib_core.o(i.CheckController))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryInitialize
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_Thread_ID_of_Pipe
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DefaultPipeCreate
</UL>

<P><STRONG><a name="[1c3]"></a>CheckPipe</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbh_lib_core.o(i.CheckPipe))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceiveGetResult
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeReceive
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDelete
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeAbort
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSendSetup
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeDoPing
</UL>

<P><STRONG><a name="[18c]"></a>USBH_DefaultPipeCreate</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_DefaultPipeCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_DefaultPipeCreate &rArr; USBH_DriverPipeCreate &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFree_PIPE
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Initialize
</UL>

<P><STRONG><a name="[18a]"></a>USBH_Engine</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_Engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = USBH_Engine &rArr; USBH_EnumerateDevice &rArr; USBH_HID_Initialize_Lib &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortSuspend
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortResume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortReset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPortGetState
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UninitializeDevices
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RecoveryEnumerateDevice
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PrepareEnumerateDevice
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
</UL>

<P><STRONG><a name="[1a0]"></a>USBH_EnumerateDevice</STRONG> (Thumb, 804 bytes, Stack size 72 bytes, usbh_lib_core.o(i.USBH_EnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = USBH_EnumerateDevice &rArr; USBH_HID_Initialize_Lib &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Initialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Unconfigure
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Configure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Initialize_Lib
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Unconfigure
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Configure
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Initialize_Lib
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Configure
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Configure
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify_Lib
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[189]"></a>USBH_Notify_Lib</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_lib_core.o(i.USBH_Notify_Lib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_Notify_Lib
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Notify
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Core_Thread
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_EnumerateDevice
</UL>

<P><STRONG><a name="[1c4]"></a>USBH_PipeDoPing</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_PipeDoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PipeSend
</UL>

<P><STRONG><a name="[186]"></a>USBH_PipeSendSetup</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_PipeSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_PipeSendSetup &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsWait
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadFlagsSet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ThreadGetHandle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryIsInPool
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransferAbort
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DriverPipeTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ControlTransfer
</UL>

<P><STRONG><a name="[19f]"></a>USBH_PrepareEnumerateDevice</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, usbh_lib_core.o(i.USBH_PrepareEnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = USBH_PrepareEnumerateDevice &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[1a1]"></a>USBH_RecoveryEnumerateDevice</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, usbh_lib_core.o(i.USBH_RecoveryEnumerateDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = USBH_RecoveryEnumerateDevice &rArr; USBH_DeviceRequest_GetDescriptor &rArr; USBH_ControlTransfer &rArr; USBH_PipeSend &rArr; USBH_PipeDoPing &rArr; USBH_DriverPipeTransfer &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryFree
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MemoryAllocate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetConfiguration
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_SetAddress
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_DeviceRequest_GetDescriptor
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[19e]"></a>USBH_UninitializeDevices</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, usbh_lib_core.o(i.USBH_UninitializeDevices))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_UninitializeDevices &rArr; USBH_HID_Unconfigure &rArr; USBH_PipeDelete &rArr; USBH_DriverPipeTransferAbort &rArr; USBH_SemaphoreRelease &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Uninitialize
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CustomClass_Unconfigure
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Uninitialize_Lib
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Unconfigure
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Uninitialize_Lib
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Unconfigure
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize_Lib
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckController
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Engine
</UL>

<P><STRONG><a name="[1b2]"></a>CheckInstance</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usbh_lib_hid.o(i.CheckInstance))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetKeyboardKey
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_IntIn_Thread
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetDevice
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Uninitialize_Lib
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Unconfigure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Initialize_Lib
</UL>

<P><STRONG><a name="[15e]"></a>MessageQueueGet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[168]"></a>MessageQueuePut</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[163]"></a>MessageQueueRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[85]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[6e]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[1ca]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>

<P><STRONG><a name="[8a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
